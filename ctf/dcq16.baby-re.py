"""Notepad search-and-replace direct port of Hopper decompilation.

Sure, the problem is probably just simplex and none of the variables should
overflow so it can be modeled with integers... But why think when you can throw
stuff into a solver?
"""
import z3

var = z3.BitVecs(' '.join(['v%d'%n for n in range(13)]), 8)

w00 = z3.Solver()

def SAR(w,s): return w>>s
def f_arg(dx):
    assert dx % 4 == 0
    assert dx < 13*4
    aaa = z3.simplify(z3.ZeroExt(24, var[dx / 4]))
    #print hex(dx), '->', repr(aaa)
    return aaa

def constrain(slv):
    """lol"""
    var_2B0 = 0x926c ^ 0x1;
    var_2AC = SAR(0x2a3a8, 0x3);
    var_2A8 = SAR(0x3a90, 0x3);
    var_2A0 = 0xc514 ^ 0xdd;
    var_298 = SAR(0x1cdc8, 0x2);
    var_294 = SAR(0x10010, 0x2);
    var_288 = 0x524c ^ 0x2e;
    var_27C = SAR(0xc6f80, 0x4);
    var_278 = SAR(0x12c90, 0x4);
    var_268 = 0x5808 ^ 0x4f;
    var_260 = SAR(0x11eee, 0x1);
    var_250 = SAR(0x90a0, 0x2);
    var_248 = SAR(0x974a0, 0x4);
    var_244 = SAR(0x19d9e, 0x1);
    var_240 = SAR(0x20f90, 0x3);
    var_234 = 0x4865 ^ 0xcc;
    var_22C = 0xb947 ^ 0xf0;
    var_21C = 0x1466 ^ 0x9d;
    var_214 = SAR(0x3864c, 0x2);
    var_210 = 0x5d02 ^ 0x53;
    var_20C = SAR(0xcb40, 0x1);
    var_1FC = SAR(0xa664, 0x2);
    var_1F8 = 0x878d ^ 0x78;
    var_1F4 = SAR(0x23d30, 0x4);
    var_1F0 = 0x59a7 ^ 0xe0;
    var_1EC = SAR(0x86b4, 0x2);
    var_1E8 = SAR(0x4f4, 0x1);
    var_1D8 = 0xabd9 ^ 0x65;
    var_1CC = SAR(0x2ffa, 0x1);
    var_1C8 = 0x8a42 ^ 0x21;
    var_1C0 = 0x6d95 ^ 0x73;
    var_1B4 = SAR(0x79b4, 0x1);
    var_1AC = SAR(0x27ce0, 0x2);
    var_1A0 = 0x13c5 ^ 0x97;
    var_19C = SAR(0x343f0, 0x3);
    var_194 = 0x9a9f ^ 0x2c;
    var_190 = 0x357e ^ 0x5c;
    var_188 = SAR(0xffc4, 0x1);
    var_184 = 0x72a3 ^ 0x3e;
    var_180 = 0x28d2 ^ 0x93;
    var_178 = SAR(0x2e62c, 0x2);
    var_16C = SAR(0x4fd6, 0x1);
    var_168 = 0x1342 ^ 0xea;
    var_164 = 0x52ed ^ 0xc2;
    var_160 = 0x73a4 ^ 0x3;
    var_15C = 0xd75a ^ 0x93;
    var_158 = SAR(0x5ec4, 0x2);
    var_154 = SAR(0xfabc, 0x2);
    var_150 = SAR(0x8e50, 0x3);
    var_144 = 0xff11 ^ 0x9a;
    var_140 = 0x438f ^ 0x98;
    var_13C = SAR(0x4984, 0x1);
    var_134 = SAR(0x33264, 0x2);
    var_130 = SAR(0x4826, 0x1);
    var_128 = SAR(0x5d928, 0x3);
    var_120 = 0xa1d6 ^ 0x9f;
    var_110 = SAR(0x1c34, 0x2);
    var_10C = 0x10fe ^ 0xd9;
    var_104 = 0x825b ^ 0x3e;
    var_100 = SAR(0x2dabc, 0x2);
    var_F4 = 0xaf41 ^ 0x39;
    var_EC = SAR(0x140c8, 0x2);
    var_E8 = SAR(0x1ea98, 0x3);
    var_E4 = 0x8e6b ^ 0x9e;
    var_DC = 0xa7ac ^ 0x11;
    var_C8 = 0x67ce ^ 0xf9;
    var_C4 = 0xb7c3 ^ 0xf;
    var_BC = SAR(0x1d5c8, 0x3);
    var_B8 = 0x4a9d ^ 0x82;
    var_B0 = 0x828e ^ 0xa9;
    var_A8 = SAR(0x24374, 0x2);
    var_A4 = 0xc95d ^ 0xdb;
    var_9C = 0x2776 ^ 0xf9;
    var_98 = SAR(0x19948, 0x1);
    var_88 = SAR(0x10268, 0x3);
    var_84 = SAR(0xb0aa, 0x1);
    var_80 = 0x7848 ^ 0x69;
    var_7C = 0x517f ^ 0xa;
    var_78 = 0x7da5 ^ 0x7d;
    var_74 = 0x8fc6 ^ 0xec;
    var_70 = 0xb910 ^ 0xde;
    var_68 = SAR(0xe72c0, 0x4);
    var_64 = 0xfe5e ^ 0xf2;
    var_60 = 0x24ef ^ 0xe3;
    var_5C = 0xe871 ^ 0xbe;
    var_58 = 0xf551 ^ 0xf9;
    var_54 = SAR(0x5f278, 0x3);
    var_40 = 0xca69 ^ 0x7e;
    var_34 = 0x101e ^ 0x18;
    var_28 = 0x5182 ^ 0xa3;
    var_24 = SAR(0xcf2a, 0x1);
    var_20 = SAR(0x1b7e4, 0x2);
    var_1C = SAR(0x62a40, 0x4);
    var_14 = SAR(0xc842, 0x1);
    var_10 = 0x1c85 ^ 0x17;

    slv.add(f_arg(0x30) * 0xd5e5 + f_arg(0x2c) * 0x99ae + f_arg(0x28) * var_288 + f_arg(0x24) * 0x3922 + f_arg(0x20) * 0xe15d + f_arg(0x1c) * var_294 + f_arg(0x18) * var_298 + f_arg(0x14) * 0xa89e + (var_2B0 * f_arg(0x0) - f_arg(0x4) * var_2AC - f_arg(0x8) * var_2A8 - f_arg(0xc) * 0xb4c1) + f_arg(0x10) * var_2A0 == 0x1468753)
    slv.add(f_arg(0x30) * 0xcfec + (f_arg(0x14) * var_268 + f_arg(0x10) * 0x39ca + (var_27C * f_arg(0x0) + f_arg(0x4) * var_278 - f_arg(0x8) * 0x1783) + f_arg(0xc) * 0x9832 - f_arg(0x18) * 0x345 - f_arg(0x1c) * var_260 - f_arg(0x20) * 0xc5a0 - f_arg(0x24) * 0x2e35 - f_arg(0x28) * 0x4e4e - f_arg(0x2c) * var_250) == 0x162f30)
    slv.add(f_arg(0x30) * 0x2ccd + f_arg(0x2c) * var_21C + (((-var_248 * f_arg(0x0) + f_arg(0x4) * var_244 - f_arg(0x8) * var_240) + f_arg(0xc) * 0x691b - f_arg(0x10) * 0xad9e - f_arg(0x14) * var_234 - f_arg(0x18) * 0xfec5 - f_arg(0x1c) * var_22C) + f_arg(0x20) * 0x4526 - f_arg(0x24) * 0x8476) + f_arg(0x28) * 0xa69e == 0xffb2939c)
    slv.add((f_arg(0x1c) * var_1F8 + ((var_214 * f_arg(0x0) - f_arg(0x4) * var_210 - f_arg(0x8) * var_20C - f_arg(0xc) * 0x6252) + f_arg(0x10) * 0xd42d - f_arg(0x14) * 0x7e51) + f_arg(0x18) * var_1FC - f_arg(0x20) * var_1F4 - f_arg(0x24) * var_1F0) + f_arg(0x28) * var_1EC - f_arg(0x2c) * var_1E8 - f_arg(0x30) * 0x2e58 == 0xffac90e3)
    slv.add(f_arg(0x30) * 0xc3a2 + (f_arg(0x24) * 0xa8b2 + (f_arg(0x10) * 0xd669 + f_arg(0xc) * 0x876e + f_arg(0x8) * var_1D8 + -0x36b5 * f_arg(0x0) + f_arg(0x4) * 0x3fc3 - f_arg(0x14) * var_1CC - f_arg(0x18) * var_1C8 - f_arg(0x1c) * 0xf219) + f_arg(0x20) * var_1C0 - f_arg(0x28) * 0xe91c) + f_arg(0x2c) * var_1B4 == 0x76d288)
    slv.add(f_arg(0x2c) * var_180 + (f_arg(0x1c) * var_190 + ((-var_1AC * f_arg(0x0) - f_arg(0x4) * 0x55fe) + f_arg(0x8) * 0x3528 - f_arg(0xc) * var_1A0 - f_arg(0x10) * var_19C - f_arg(0x14) * 0x7bdc) + f_arg(0x18) * var_194 - f_arg(0x20) * 0xe6af - f_arg(0x24) * var_188) + f_arg(0x28) * var_184 - f_arg(0x30) * 0x3d22 == 0xff78bf99)
    slv.add(f_arg(0x30) * 0x49d7 + (((f_arg(0x8) * 0x34a5 + -var_178 * f_arg(0x0) + f_arg(0x4) * 0xe200 - f_arg(0xc) * var_16C - f_arg(0x10) * var_168 - f_arg(0x14) * var_164 - f_arg(0x18) * var_160) + f_arg(0x1c) * var_15C - f_arg(0x20) * var_158) + f_arg(0x24) * var_154 - f_arg(0x28) * var_150 - f_arg(0x2c) * 0x8d6) == 0xfff496e3)
    slv.add((f_arg(0x1c) * var_128 + (-var_144 * f_arg(0x0) + f_arg(0x4) * var_140 - f_arg(0x8) * var_13C - f_arg(0xc) * 0x57f2 - f_arg(0x10) * var_134 - f_arg(0x14) * var_130) + f_arg(0x18) * 0xd03d - f_arg(0x20) * 0xe6e7 - f_arg(0x24) * var_120 - f_arg(0x28) * 0x5f66) + f_arg(0x2c) * 0xa0da - f_arg(0x30) * 0x5b97 == 0xff525e90)
    slv.add(f_arg(0x30) * 0x4737 + ((f_arg(0x14) * 0xe4b7 + f_arg(0x10) * var_100 + (var_110 * f_arg(0x0) + f_arg(0x4) * var_10C - f_arg(0x8) * 0x4204) + f_arg(0xc) * var_104 - f_arg(0x18) * 0x8546 - f_arg(0x1c) * var_F4 - f_arg(0x20) * 0x2e9d - f_arg(0x24) * var_EC) + f_arg(0x28) * var_E8 - f_arg(0x2c) * var_E4) == 0xfffd7704)
    slv.add(f_arg(0x30) * 0xf8c0 + (f_arg(0x28) * 0x2a24 + f_arg(0x24) * var_B8 + f_arg(0x20) * var_BC + f_arg(0x1c) * 0xa57b + ((-var_DC * f_arg(0x0) + f_arg(0x4) * 0xee80 - f_arg(0x8) * 0xb071) + f_arg(0xc) * 0xa144 - f_arg(0x10) * 0x6ba - f_arg(0x14) * var_C8) + f_arg(0x18) * var_C4 - f_arg(0x2c) * var_B0) == 0x897cbb)
    slv.add(f_arg(0x30) * var_78 + (f_arg(0x28) * var_80 + (f_arg(0x1c) * 0xe5a2 + f_arg(0x18) * 0x312b + (-var_A8 * f_arg(0x0) - f_arg(0x4) * var_A4 - f_arg (0x8) * 0x4586 - f_arg(0xc) * var_9C - f_arg(0x10) * var_98) + f_arg(0x14) * 0x31ca - f_arg(0x20) * var_88) + f_arg(0x24) * var_84 - f_arg(0x2c) * var_7C) == 0xffc05f9f)
    slv.add(f_arg(0x30) * 0x9e3e + (f_arg(0x24) * 0xb8f4 + (f_arg(0x14) * var_60 + (var_74 * f_arg(0x0) + f_arg(0x4) * var_70 - f_arg(0x8) * 0x8202 - f_arg(0xc) * var_68) + f_arg(0x10) * var_64 - f_arg(0x18) * var_5C - f_arg(0x1c) * var_58) + f_arg(0x20) * var_54 - f_arg(0x28) * 0x92d8) + f_arg(0x2c) * 0xe10c == 0x3e4761)
    slv.add(f_arg(0x30) * var_10 + (f_arg(0x24) * var_1C + f_arg(0x20) * var_20 + (f_arg(0x10) * 0xe877 + (var_40 * f_arg(0x0) + f_arg(0x4) * 0x8c27 - f_arg(0x8) * 0xf992) + f_arg(0xc) * var_34 - f_arg(0x14) * 0x538a - f_arg(0x18) * var_28) + f_arg(0x1c) * var_24 - f_arg(0x28) * 0xab0d) + f_arg(0x2c) * var_14 == 0x1b4945)

constrain(w00)

print '[x] set'

n = 0
while 1:
    if w00.check() == z3.sat:
        sln = w00.model()
        if 1:
            print sln
        n += 1
        w00.add(z3.Or([d() != sln[d] for d in sln]))
